{"version":3,"sources":["Store/store.js","Component/Auth/Auth.js","Component/App/AddStar.js","Component/App/RemoveStar.js","Component/App/Reps.js","Component/App/Profiles.js","Component/App/Search.js","Component/App/HomePage.js","Component/App/FollowUser.js","Component/App/Profile.js","Component/App/Repository.js","Component/App/Routing.js","Component/App/App.js","Controllers/App/App.js","serviceWorker.js","Store/authstore.js","Component/Auth/style.js","index.js","Component/Header/Header.js"],"names":["initialState","counter","createStore","state","type","window","__REDUX_DEVTOOLS_EXTENSION__","decrement","increment","useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","form","width","submit","margin","LoginForm","stats","useState","password","setPassword","localStorage","getItem","token","updateToken","classes","to","Container","component","maxWidth","CssBaseline","className","Typography","variant","TextField","required","fullWidth","name","label","id","autoComplete","value","onChange","event","target","Button","color","onClick","setItem","location","reload","STAR_REPOSITORY","gql","Star","mutation","variables","starRepository","removeStarquery","RemoveStar","removeStar","GET_REPOSITORIES_OF_ORGANIZATION","Repositories","selectedRepositoryIds","login","this","props","repositories","React","Component","RepositoryList","edges","map","node","includes","push","owner","key","isPrivate","href","viewerHasStarred","Reps","quer","query","data","loading","search","userQuery","Profiles","User","src","user","avatarUrl","alt","Search","searchTerm","setSearchTerm","filter","setFilter","placeholder","Home","class","FOLLOWUSER","UNFOLLOWUSER","FollowUser","followUser","UnfollowUser","unfollowUser","reposQuery","DisplayFullprofile","Grid","container","justify","item","xs","email","bio","isViewer","viewerIsFollowing","UserRepositories","useParams","Myrepositories","first","viewer","GET_REPOSITORY","DisplayRepos","repository","isArchived","url","stargazers","totalCount","primaryLanguage","description","Repository","Routing","currentUser","path","Profile","Auth","HomePage","App","connect","dispatch","Boolean","hostname","match","loggedIn","repList","store","action","removeItem","next","SButton","styled","button","h1","input","div","cache","InMemoryCache","httpLink","HttpLink","uri","headers","authorization","rootElement","document","getElementById","client","ApolloClient","link","ReactDOM","render","ourStore","AppBar","position","Toolbar","IconButton","aria-label","aria-controls","aria-haspopup","AccountCircle","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5ca2d95f.chunk.js","sourcesContent":["import { createStore } from 'redux';\r\n\r\nconst initialState = {\r\n    counter: 0\r\n};\r\n\r\nfunction counter(state = initialState, action) {\r\n    switch (action.type) {\r\n        case 'INCREMENT':\r\n            return {...state, counter: state.counter+1};\r\n        case 'DECREMENT':\r\n            return {...state, counter: state.counter-1};\r\n\r\n        default:\r\n            return state;\r\n    }};\r\n\r\nlet store  = createStore(counter,initialState,\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n\r\nexport const decrement = {type:'DECREMENT'};\r\nexport const increment = {type: \"INCREMENT\"};\r\n\r\nexport default store;","import React, {useState} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\n\r\nconst LoginForm = ({stats}) => {\r\n    const [password, setPassword] = useState('');\r\n    let [token, updateToken] = useState(localStorage.getItem('token'));\r\n    const classes = useStyles();\r\n    return token ? (\r\n        <Redirect to='/'/>\r\n    ) : (\r\n        <div>\r\n            <Container component=\"main\" maxWidth=\"xs\">\r\n                <CssBaseline/>\r\n                <div className={classes.paper}>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Sign in\r\n                    </Typography>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        name=\"password\"\r\n                        label=\"Your personal GitHub token\"\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        autoComplete=\"current-password\"\r\n                        value={password}\r\n                        onChange={(event) => setPassword(event.target.value)}\r\n                    />\r\n                    <Button\r\n                        type=\"button\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                        onClick={loginFor}>\r\n                        Sign In\r\n                    </Button>\r\n                </div>\r\n            </Container>\r\n        </div>\r\n    );\r\n\r\n    function loginFor() {\r\n        localStorage.setItem('token', password);\r\n        setPassword();\r\n        updateToken(localStorage.getItem('token'));\r\n        window.location.reload(true);\r\n    }\r\n\r\n\r\n};\r\n\r\nexport default LoginForm;","import gql from \"graphql-tag\";\r\nimport {Mutation} from \"@apollo/react-components\";\r\nimport React from \"react\";\r\nimport StarIcon from '@material-ui/icons/Star';\r\n\r\nconst STAR_REPOSITORY = gql`\r\n  mutation($id: ID!) {\r\n    addStar(input: { starrableId: $id }) {\r\n      starrable {\r\n        id\r\n        viewerHasStarred\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst Star = ({id}) => (\r\n    <Mutation mutation={STAR_REPOSITORY} variables={{id}}>\r\n        {starRepository => (\r\n            <StarIcon onClick={starRepository} className=\"hover\">\r\n                star\r\n            </StarIcon>\r\n        )}\r\n    </Mutation>\r\n);\r\n\r\nexport default Star;","import React from 'react';\r\nimport {Mutation} from 'react-apollo'\r\nimport gql from \"graphql-tag\";\r\nimport StarIcon from '@material-ui/icons/Star';\r\n\r\n\r\nconst removeStarquery = gql`\r\nmutation RemoveStar($id:ID!){\r\n   removeStar(input:{starrableId:$id}){\r\n    starrable{\r\n      id\r\n      viewerHasStarred\r\n    }\r\n  }\r\n}`\r\n\r\nconst RemoveStar = ({id}) => (\r\n    <Mutation mutation={removeStarquery} variables={{id}}>\r\n        {removeStar => (\r\n            <StarIcon color=\"secondary\" onClick={removeStar} className=\"hover\">\r\n                removestar\r\n            </StarIcon>\r\n        )}\r\n    </Mutation>\r\n);\r\n\r\nexport default RemoveStar;","import React from 'react';\r\nimport gql from 'graphql-tag';\r\nimport {Query} from 'react-apollo';\r\nimport Star from \"./AddStar\";\r\nimport RemoveStar from \"./RemoveStar\";\r\nimport LockIcon from '@material-ui/icons/Lock';\r\nimport LockOpenIcon from '@material-ui/icons/LockOpen';\r\nimport './App.css';\r\n\r\nconst GET_REPOSITORIES_OF_ORGANIZATION = gql`\r\n  query Reps($quer: String!) {\r\n    search(query: $quer, type: REPOSITORY, first: 10) {\r\n      edges {\r\n        node {\r\n          ... on Repository {\r\n            id\r\n            name\r\n            viewerHasStarred\r\n            url\r\n            isPrivate\r\n            isArchived\r\n            owner {\r\n            login\r\n            avatarUrl\r\n          }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst Reps = ({quer}) => (\r\n    <Query query={GET_REPOSITORIES_OF_ORGANIZATION} variables={{quer}}>\r\n        {({data, loading}) => {\r\n            return (loading ? <div>Loading ...</div> :\r\n                data ? <div><Repositories repositories={data.search}/></div> :\r\n                    <p>Nothing was found</p>);\r\n        }\r\n        }\r\n    </Query>\r\n);\r\n\r\nexport class Repositories extends React.Component {\r\n    state = {\r\n        selectedRepositoryIds: [],\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <RepositoryList\r\n                login={this.props.login}\r\n                repositories={this.props.repositories}\r\n                selectedRepositoryIds={this.state.selectedRepositoryIds}\r\n            />\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst RepositoryList = ({\r\n                            login,\r\n                            repositories,\r\n                            selectedRepositoryIds,\r\n                        }) => (\r\n    <ul>\r\n        {repositories.edges.map(({node}) => {\r\n                const isSelected = selectedRepositoryIds.includes(node.id);\r\n\r\n                const rowClassName = ['row'];\r\n\r\n                if (isSelected) {\r\n                    rowClassName.push('row_selected');\r\n                }\r\n                login = (typeof node.owner != 'undefined') ? node.owner.login : login;\r\n                return (<div className=\"RepositoryItem\" key={node.id}>\r\n                        {node.isPrivate && <LockIcon/>}\r\n                        {!node.isPrivate && <LockOpenIcon/>}\r\n                        <a href={login + '/repository/' + node.name}>{node.name}</a>\r\n                        {!node.viewerHasStarred && <Star className=\"hover\" id={node.id}/>}\r\n                        {node.viewerHasStarred && <RemoveStar id={node.id}/>}\r\n                    </div>\r\n                );\r\n            }\r\n        )\r\n        }\r\n    </ul>\r\n);\r\nexport default Reps;","import React from 'react';\r\nimport gql from 'graphql-tag';\r\nimport {Query} from 'react-apollo';\r\nimport './App.css';\r\n\r\nconst userQuery = gql`\r\nquery User($login:String!){\r\n    user(login: $login) {\r\n        login\r\n        name\r\n        avatarUrl\r\n        bio\r\n        email  } \r\n        }\r\n        `;\r\n\r\n\r\nexport const Profiles = ({login}) => (\r\n    <Query query={userQuery} variables={{login}}>\r\n        {({data, loading}) => {\r\n            return (loading ? <div>Loading ...</div> :\r\n                data ? <User data={data}/> :\r\n                    <p>Nothing was found</p>);\r\n        }\r\n        }\r\n    </Query>\r\n);\r\n\r\nconst User = ({data}) => {\r\n    return (\r\n        <div className=\"card\">\r\n            <img src={data.user.avatarUrl} alt=\"avatar\" width=\"100%\"/>\r\n            <h1><a href={data.user.login}>{data.user.login}</a></h1>\r\n            <p className=\"login\"> {data.user.name}</p>\r\n        </div>\r\n    );\r\n}","import React, {useState} from 'react';\r\nimport Reps from \"./Reps\";\r\nimport {Profiles} from \"./Profiles\";\r\nimport './App.css';\r\n\r\nfunction Search() {\r\n    const [searchTerm, setSearchTerm] = React.useState(\"\");\r\n    const [filter, setFilter] = useState(true);\r\n    const handleChange = event => {\r\n        setSearchTerm(event.target.value);\r\n    };\r\n    return (\r\n\r\n        <div>\r\n            <div className=\"Search\">\r\n                <button className=\"button\"\r\n                        onClick={() => setFilter(!filter)}> {filter ? \"By users\" : \"By repositories\"} </button>\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"searchTerm\"\r\n                    placeholder=\"Search\"\r\n                    value={searchTerm}\r\n                    onChange={handleChange}\r\n                />\r\n\r\n            <div className=\"App\">\r\n                {filter ?\r\n                    <Profiles login={searchTerm}/> :\r\n                    <Reps quer={searchTerm}/>\r\n                }\r\n            </div></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Search","import React from 'react';\r\nimport Search from \"./Search\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport './App.css';\r\n\r\nexport default function Home() {\r\n\r\n    const currentUser = localStorage.getItem('token');\r\n    return (\r\n        currentUser ? (\r\n            <div>\r\n                <div className=\"wrap\">\r\n                    <div className=\"search\">\r\n                        <Search class=\"searchTerm\"/>\r\n                    </div>\r\n                </div>\r\n            </div>) : <Redirect to='/auth'/>\r\n    );\r\n\r\n};\r\n\r\n","import gql from \"graphql-tag\";\r\nimport {Mutation} from \"@apollo/react-components\";\r\nimport React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst FOLLOWUSER = gql`\r\nmutation($id:ID!){\r\n   followUser(input: {userId:$id} ) {\r\n        user{\r\n            id\r\n            viewerIsFollowing\r\n        }\r\n  }\r\n}`;\r\n\r\nconst UNFOLLOWUSER = gql`\r\nmutation($id:ID!){\r\n   unfollowUser(input: {userId:$id} ) {\r\n        user{\r\n            id\r\n            viewerIsFollowing\r\n        }\r\n  }\r\n}`;\r\n\r\nexport const FollowUser = ({id}) => (\r\n    <Mutation mutation={FOLLOWUSER} variables={{id}}>\r\n        {followUser => (\r\n            <Button color=\"default\" onClick={followUser}>\r\n                Follow\r\n            </Button>\r\n        )}\r\n    </Mutation>\r\n);\r\n\r\nexport const UnfollowUser = ({id}) => (\r\n    <Mutation mutation={UNFOLLOWUSER} variables={{id}}>\r\n        {unfollowUser => (\r\n            <Button color=\"primary\" onClick={unfollowUser}>\r\n                Unfollow\r\n            </Button>\r\n        )}\r\n    </Mutation>\r\n);\r\n\r\n\r\n","import gql from \"graphql-tag\";\r\nimport React from \"react\";\r\nimport {Query} from 'react-apollo'\r\nimport {Repositories} from \"./Reps\";\r\nimport './App.css';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {useParams} from \"react-router\";\r\nimport {FollowUser, UnfollowUser} from \"./FollowUser\";\r\n\r\nconst reposQuery = gql`\r\nquery Myrepositories($first:Int!){\r\n    viewer {\r\n        id\r\n        isViewer\r\n        viewerIsFollowing\r\n        name\r\n        login\r\n        avatarUrl\r\n        bio\r\n        email   \r\n        repositories(first: $first) {\r\n            edges {\r\n                node {\r\n                    id\r\n                    name\r\n                    stargazers{\r\n                        totalCount\r\n                    }\r\n                    viewerHasStarred\r\n                    isPrivate\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n`;\r\n\r\n\r\nfunction DisplayFullprofile(props) {\r\n    const {data} = props\r\n    return (<div>\r\n            <Grid container spacing={0} justify=\"center\">\r\n                <Grid item xs={3}>\r\n                    <div className=\"card\">\r\n                        <div className=\"UserCard\">\r\n                            <img src={data.avatarUrl} alt=\"avatar\" width=\"100%\"/>\r\n                            <h1> {data.name}</h1>\r\n                            <p className=\"login\"> {data.login}</p>\r\n                            <p> {data.email}</p>\r\n                            <p> {data.bio}</p>\r\n                            {!data.isViewer && !data.viewerIsFollowing && <FollowUser id={data.id}/>}\r\n                            {!data.isViewer && data.viewerIsFollowing && <UnfollowUser id={data.id}/>}\r\n                        </div>\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <h2>Repositories</h2>\r\n                    <Repositories repositories={data.repositories} login={data.login}/>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Myrepositories() {\r\n    return (\r\n        <Query query={reposQuery} variables={{first: 10}}>\r\n            {({data, loading}) => {\r\n                if (loading) return <p>loading...</p>;\r\n                return (\r\n                    <DisplayFullprofile data={data.viewer}/>)\r\n            }}\r\n        </Query>\r\n    );\r\n}\r\n\r\nconst userQuery = gql`\r\nquery Userrepositories($login:String!){\r\n  user(login: $login) {\r\n    id\r\n    isViewer\r\n    viewerIsFollowing\r\n    avatarUrl\r\n    bio\r\n    email\r\n    login\r\n    name\r\n    repositories(first: 10) {\r\n      edges {\r\n        node {\r\n          id\r\n          name\r\n          stargazers {\r\n            totalCount\r\n          }\r\n          viewerHasStarred\r\n          isPrivate\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nexport function UserRepositories() {\r\n    let {login} = useParams();\r\n    return (\r\n        <Query query={userQuery} variables={{login}}>\r\n            {({data, loading}) => {\r\n                if (loading) return <p>loading...</p>;\r\n                return (\r\n                    <DisplayFullprofile data={data.user}/>)\r\n            }}\r\n        </Query>\r\n    );\r\n}\r\n\r\nexport default Myrepositories;","import {useParams} from \"react-router\";\r\nimport gql from \"graphql-tag\";\r\nimport {Query} from \"@apollo/react-components\";\r\nimport React from \"react\";\r\nimport './App.css';\r\nimport LockIcon from '@material-ui/icons/Lock';\r\nimport LockOpenIcon from '@material-ui/icons/LockOpen';\r\nimport ArchiveIcon from '@material-ui/icons/Archive';\r\n\r\nconst GET_REPOSITORY = gql`\r\n  query Repos($name: String!, $login: String!) {\r\n    repository(owner:$login, name: $name) {\r\n            id\r\n            url\r\n            viewerHasStarred\r\n            isPrivate\r\n            isArchived\r\n            primaryLanguage {\r\n                name\r\n            }\r\n            stargazers {\r\n                totalCount\r\n            }\r\n            description\r\n            owner {\r\n                login\r\n                avatarUrl\r\n            }\r\n        }\r\n  }\r\n`;\r\n\r\nfunction DisplayRepos(props) {\r\n    const {data} = props;\r\n    return (<div className=\"card\">\r\n            <div className=\"RepositoryCard\">\r\n                <p className=\"login\"> {data.repository.owner.login}</p>\r\n                {data.repository.isPrivate && <LockIcon/>}\r\n                {!data.repository.isPrivate && <LockOpenIcon/>}\r\n                {data.repository.isArchived && <ArchiveIcon/>}\r\n                <p><a href={data.repository.url}> Link on GitHub</a></p>\r\n                <p className=\"login\"> {data.repository.stargazers.totalCount} stars</p>\r\n                <p> Language:{data.repository.primaryLanguage && data.repository.primaryLanguage.name}</p>\r\n                {data.repository.description}\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Repository = () => {\r\n    let {login, name} = useParams();\r\n    return (<Query query={GET_REPOSITORY} variables={{login, name}}>\r\n        {({data, loading}) => {\r\n            return (loading ? <div>Loading ...</div> :\r\n                data ? <DisplayRepos data={data}/> :\r\n                    <p>Nothing was found</p>);\r\n        }\r\n        }\r\n    </Query>);\r\n};","import React from 'react';\r\nimport Auth from \"../Auth/Auth\";\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route, Redirect\r\n} from \"react-router-dom\";\r\nimport HomePage from \"./HomePage\";\r\nimport Profile, {UserRepositories} from \"./Profile\";\r\nimport {Repository} from \"./Repository\";\r\n\r\nfunction Routing() {\r\n    const currentUser = localStorage.getItem('token');\r\n   const path  = 'https://anutasaveleva.github.io/gitclient_react';\r\n    return (\r\n        <Router>\r\n            <Switch>\r\n                {currentUser && <Route path={`${path}/myprofile`} component={Profile}/>}\r\n                {<Route path={`${path}/auth`} component={Auth}/>}\r\n                {currentUser && <Route path={`${path}/:login/repository/:name`} component={Repository}/>}\r\n                {currentUser && <Route path={`${path}/:login/`} component={UserRepositories}/>}\r\n                {currentUser && <Route path={`${path}`} component={HomePage}/>}\r\n                <Redirect to={`${path}/auth`}/>\r\n            </Switch>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default Routing;","import React from 'react';\nimport Routing from \"./Routing\";\nfunction App() {\n    return (\n        <Routing/>\n    );\n}\n\nexport default App;\n","import {connect} from 'react-redux';\r\nimport {increment, decrement} from '../../Store/store';\r\nimport App from '../../Component/App/App'\r\n\r\nconst mapStateToProps = ({counter}) => ({\r\n    counter\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    increment: () => dispatch(increment),\r\n    decrement: () => dispatch(decrement)\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore } from 'redux';\r\nconst initialState = {\r\n    user:{},\r\n    loggedIn: false,\r\n    repList : 'myreps'\r\n};\r\nfunction authentication(state = initialState, action) {\r\n    switch (action.type) {\r\n        case 'LOGIN':\r\n            return {\r\n                user: action.user,\r\n                loggedIn: true\r\n            };\r\n        case 'LOGOUT':\r\n            const currentUser = localStorage.getItem('currentUser');\r\n            localStorage.removeItem('currentUser');\r\n            currentUser.next(null);\r\n            return {\r\n                user: {},\r\n                loggedIn: false\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }};\r\n\r\n\r\n\r\nlet store  = createStore(authentication,initialState,\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n\r\nexport const logout = {type: \"LOGOUT\"};\r\n\r\nexport default store;","import styled from 'styled-components';\r\n\r\n\r\nexport const SButton = styled.button`\r\n    width: 100px;\r\n    height: 25px;\r\n    margin: 10px 10px;\r\n    border: 1px solid #ccc;\r\n    box-sizing: border-box;\r\n    border-radius: 10px;\r\n    background-color: cornflowerblue;\r\n    color: white;\r\n`;\r\n\r\nexport const Title = styled.h1`\r\n    text-transform: uppercase;\r\n    text-align:center;\r\n    width: 592px;\r\n    font-family: Roboto serif;\r\n    font-style: normal;\r\n    font-weight: 200;\r\n    font-size: 48px;\r\n\r\n    color: #333333;`;\r\n\r\nexport const InputContainer = styled.input`\r\n    width: 300px;\r\n    height: 15%;\r\n    margin: 10px 10px;\r\n    border: 1px solid #ccc;\r\n    box-sizing: border-box;\r\n    border-radius: 10px;`;\r\n\r\nexport const MyForm = styled.div`\r\n    margin-top: 100px;\r\n    justify-content: center;\r\n    width: 337px;\r\n    height: 278px;\r\n    border: 1px solid #E0E0E0;\r\n    box-sizing: border-box;\r\n    border-radius: 18px;`;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Controllers/App/App';\nimport {Provider} from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport ourStore from './Store/authstore';\nimport {ApolloProvider} from 'react-apollo';\nimport {ApolloClient} from 'apollo-client';\nimport {HttpLink} from 'apollo-link-http';\nimport {InMemoryCache} from 'apollo-cache-inmemory';\nimport {Header} from \"./Component/Header/Header\";\n\nconst cache = new InMemoryCache();\n\nconst GITHUB_BASE_URL = 'https://api.github.com/graphql';\n\nconst httpLink = new HttpLink({\n    uri: GITHUB_BASE_URL,\n    headers: {\n        authorization: `Bearer ${\n            localStorage.getItem('token')\n        }`,\n    },\n});\nconst rootElement = document.getElementById('root');\nconst client = new ApolloClient({\n    link: httpLink,\n    cache,\n});\n\nReactDOM.render(\n    <Provider store={ourStore}>\n        <ApolloProvider client={client}>\n            <Header/>\n            <App/>\n        </ApolloProvider>\n    </Provider>\n    , rootElement\n);\n\nserviceWorker.unregister();\n","import {AppBar, Toolbar, IconButton, Typography} from '@material-ui/core';\r\nimport React from \"react\";\r\nimport {SButton} from \"../Auth/style\";\r\nimport {AccountCircle} from \"@material-ui/icons\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport function Header() {\r\n    const currentUser = localStorage.getItem('token');\r\n    return (\r\n        <AppBar position=\"static\">\r\n            <Toolbar>\r\n                <Typography variant=\"h6\">\r\n                    <a href='/'>\r\n                        GitHub Client\r\n                    </a>\r\n                </Typography>\r\n                <div>\r\n                    <IconButton\r\n                        aria-label=\"account of current user\"\r\n                        aria-controls=\"menu-appbar\"\r\n                        aria-haspopup=\"true\"\r\n\r\n                        color=\"inherit\"><a href='/myprofile'>\r\n                        <AccountCircle/></a>\r\n                    </IconButton>\r\n                </div>\r\n                {\r\n                    currentUser && <SButton onClick={logOut}>Log out</SButton>\r\n                }\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n\r\n    function logOut() {\r\n        localStorage.removeItem('token');\r\n        window.location.reload(true);\r\n        return (\r\n            <Redirect to=\"/auth\"/>\r\n        );\r\n\r\n\r\n    }\r\n}"],"sourceRoot":""}