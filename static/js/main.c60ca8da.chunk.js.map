{"version":3,"sources":["Component/Auth/Auth.module.css","Store/authstore.js","Component/Auth/style.js","Component/App/AddStar.js","Component/App/RemoveStar.js","Component/App/Reps.js","Component/App/Search.js","Component/Auth/Auth.js","Controllers/Auth/Auth.js","Store/store.js","Component/App/HomePage.js","Component/App/Routing.js","Component/App/App.js","Controllers/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","initialState","JSON","parse","localStorage","getItem","user","loggedIn","repList","store","createStore","state","action","type","currentUser","removeItem","next","window","__REDUX_DEVTOOLS_EXTENSION__","logIn","BehaviorSubject","requestOptions","method","headers","Promise","resolve","reject","setTimeout","then","setItem","stringify","console","log","logout","styled","div","SButton","button","Title","h1","InputContainer","input","MyForm","STAR_REPOSITORY","gql","Star","id","mutation","variables","starRepository","onClick","removeStarquery","RemoveStar","removeStar","color","GET_REPOSITORIES_OF_ORGANIZATION","Repositories","selectedRepositoryIds","repositories","this","props","React","Component","RepositoryList","edges","map","node","rowClassName","includes","push","className","join","key","href","url","name","viewerHasStarred","Reps","query","data","loading","organization","Search","useState","searchTerm","setSearchTerm","placeholder","value","onChange","event","target","LoginForm","stats","login","setLogin","password","setPassword","to","required","body","connect","authentication","dispatch","Auth","counter","decrement","increment","Home","logOut","location","reload","Routing","path","component","HomePage","App","Boolean","hostname","match","cache","InMemoryCache","httpLink","HttpLink","uri","authorization","process","rootElement","document","getElementById","client","ApolloClient","link","ReactDOM","render","ourStore","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c60ca8da.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkBoxStyle\":\"Auth_checkBoxStyle__3h2Vo\"};","import { createStore } from 'redux';\r\nimport {BehaviorSubject} from \"rxjs\";\r\n\r\nlet user = JSON.parse(localStorage.getItem('user'));\r\nconst initialState = {\r\n    user:{},\r\n    loggedIn: false,\r\n    repList : 'myreps'\r\n};\r\nfunction authentication(state = initialState, action) {\r\n    switch (action.type) {\r\n        case 'LOGIN':\r\n            return {\r\n                user: action.user,\r\n                loggedIn: true\r\n            };\r\n        case 'LOGOUT':\r\n            const currentUser = localStorage.getItem('currentUser');\r\n            localStorage.removeItem('currentUser');\r\n            currentUser.next(null);\r\n            return {\r\n                user: {},\r\n                loggedIn: false\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }};\r\n\r\n\r\n\r\nlet store  = createStore(authentication,initialState,\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n\r\nexport const logIn = () => {\r\n    const currentUser = new BehaviorSubject(JSON.parse(localStorage.getItem('currentUser')));\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: {'Content-Type': 'application/json'},\r\n        //body: JSON.stringify({username, password})\r\n    };\r\n    const promise = new Promise(function (resolve, reject) {\r\n        setTimeout(() => resolve(requestOptions), 1000);\r\n    }).then(user => {\r\n            localStorage.setItem('currentUser', JSON.stringify(user));\r\n            currentUser.next(user);\r\n            console.log('in Local storage: ', localStorage.getItem('currentUser'));\r\n            return user;\r\n        }\r\n    )/*.then((response) => {\r\n        dispatch({ type: \"LOGIN\", payload: response})\r\n    })*/;\r\n}\r\n\r\nexport const logout = {type: \"LOGOUT\"};\r\n\r\nexport default store;","import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\ndisplay: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    min-height: 100%;\r\n    flex-direction: column;\r\n    `;\r\n\r\nexport const SButton = styled.button`\r\n    width: 300px;\r\n    height: 25px;\r\n    margin: 10px 10px;\r\n    display: flex;\r\n    border: 1px solid #ccc;\r\n    box-sizing: border-box;\r\n    border-radius: 10px;\r\n    background-color: cornflowerblue;\r\n    justify-content: center;\r\n    color: white;\r\n`;\r\n\r\nexport const Title = styled.h1`\r\n    text-transform: uppercase;\r\n    width: 592px;\r\n    font-family: Roboto serif;\r\n    font-style: normal;\r\n    font-weight: 200;\r\n    font-size: 48px;\r\n    text-align: center;\r\n\r\n    color: #333333;`;\r\n\r\nexport const InputContainer = styled.input`\r\n    width: 300px;\r\n    height: 15%;\r\n    margin: 10px 10px;\r\n    border: 1px solid #ccc;\r\n    box-sizing: border-box;\r\n    border-radius: 10px;`;\r\n\r\nexport const MyForm = styled.div`\r\n    margin-top: 100px;\r\n    display: flex;\r\n    \r\n    flex-direction: column;\r\n    width: 337px;\r\n    height: 278px;\r\n    border: 1px solid #E0E0E0;\r\n    box-sizing: border-box;\r\n    border-radius: 18px;`;\r\n","import gql from \"graphql-tag\";\r\nimport {Mutation} from \"@apollo/react-components\";\r\nimport React from \"react\";\r\nimport StarIcon from '@material-ui/icons/Star';\r\n\r\nconst STAR_REPOSITORY = gql`\r\n  mutation($id: ID!) {\r\n    addStar(input: { starrableId: $id }) {\r\n      starrable {\r\n        id\r\n        viewerHasStarred\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst Star = ({id}) => (\r\n    <Mutation mutation={STAR_REPOSITORY} variables={{id}}>\r\n        {starRepository => (\r\n            <StarIcon onClick={starRepository}>\r\n                star\r\n            </StarIcon>\r\n        )}\r\n    </Mutation>\r\n);\r\n\r\nexport default Star;","import React, { Component } from 'react';\r\nimport { Mutation } from 'react-apollo'\r\nimport gql from \"graphql-tag\";\r\nimport StarIcon from '@material-ui/icons/Star';\r\nimport color from \"@material-ui/core/colors/yellow\";\r\n\r\n\r\n\r\nconst removeStarquery = gql`\r\nmutation RemoveStar($id:ID!){\r\n   removeStar(input:{starrableId:$id}){\r\n    starrable{\r\n      id\r\n      viewerHasStarred\r\n    }\r\n  }\r\n}`\r\n\r\nconst RemoveStar = ({id}) => (\r\n    <Mutation mutation={removeStarquery} variables={{id}}>\r\n        {removeStar => (\r\n            <StarIcon color=\"error\" onClick={removeStar}>\r\n                removestar\r\n            </StarIcon>\r\n        )}\r\n    </Mutation>\r\n);\r\n\r\nexport default RemoveStar;","import React from 'react';\r\nimport gql from 'graphql-tag';\r\nimport {Query, Mutation} from 'react-apollo';\r\nimport Star from \"./AddStar\";\r\nimport RemoveStar from \"./RemoveStar\";\r\n\r\nconst GET_REPOSITORIES_OF_ORGANIZATION = gql`\r\n  query Reps($name: String!) {\r\n    organization(login: $name) {\r\n      repositories(first: 20) {\r\n        edges {\r\n          node {\r\n            id\r\n            name\r\n            url\r\n            viewerHasStarred\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst Reps = ({name}) => (\r\n    <Query query={GET_REPOSITORIES_OF_ORGANIZATION} variables={{name}}>\r\n        {({data, loading}) =>\r\n            loading ? <div>Loading ...</div> :\r\n                data ? <Repositories repositories={data.organization.repositories}/> :\r\n                <p>Nothing was found</p>\r\n        }\r\n    </Query>\r\n);\r\n\r\nclass Repositories extends React.Component {\r\n    state = {\r\n        selectedRepositoryIds: [],\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <RepositoryList\r\n                repositories={this.props.repositories}\r\n                selectedRepositoryIds={this.state.selectedRepositoryIds}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nconst RepositoryList = ({\r\n                            repositories,\r\n                            selectedRepositoryIds,\r\n                        }) => (\r\n    <ul>\r\n        {repositories.edges.map(({node}) => {\r\n            const isSelected = selectedRepositoryIds.includes(node.id);\r\n\r\n            const rowClassName = ['row'];\r\n\r\n            if (isSelected) {\r\n                rowClassName.push('row_selected');\r\n            }\r\n\r\n            return (\r\n                <li className={rowClassName.join(' ')} key={node.id}>\r\n\r\n                    <a href={node.url}>{node.name}</a>{' '}\r\n                    {!node.viewerHasStarred && <Star id={node.id} />}\r\n                    { node.viewerHasStarred && <RemoveStar id={node.id}/>}\r\n                </li>\r\n            );\r\n        })}\r\n    </ul>\r\n);\r\nexport default Reps;\r\n","import React from 'react';\r\nimport Reps from \"./Reps\";\r\n\r\n\r\nfunction Search() {\r\n    const [searchTerm, setSearchTerm] = React.useState(\"\");\r\n    const handleChange = event => {\r\n        setSearchTerm(event.target.value);\r\n    };\r\n    return (\r\n        <div className=\"App\">\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"Search\"\r\n                value={searchTerm}\r\n                onChange={handleChange}\r\n            />\r\n            <Reps name={searchTerm}/>\r\n        </div>);\r\n}\r\n\r\nexport default Search","import React, {useState} from 'react'\r\nimport styles from './Auth.module.css';\r\nimport {SButton, Title, InputContainer, MyForm, Container} from './style';\r\nimport Search from \"../App/Search\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nconst LoginForm = ({stats}) => {\r\n    const [login, setLogin] = useState('');\r\n    const [isChecked, setChecked] = useState(false);\r\n    const [password, setPassword] = useState('');\r\n    const currentUser = localStorage.getItem('currentUser');\r\n    console.log('cur user',currentUser);\r\n    return currentUser ? (\r\n        <Redirect to='/'/>\r\n    ) : (\r\n        <div>\r\n            <Title>Log in page</Title>\r\n            <MyForm>\r\n                <div>\r\n                    <InputContainer value={login} onChange={(event) => setLogin(event.target.value)}\r\n                                    name=\"login\" required placeholder=\"Username\"/>\r\n                    <InputContainer name=\"password\" type=\"password\" required\r\n                                    placeholder=\"Password\"\r\n                                    onChange={(event) => setPassword(event.target.value)} value={password}/>\r\n                    <SButton type=\"primary\" onClick={loginFor}>Log in</SButton>\r\n                </div>\r\n            </MyForm>\r\n        </div>\r\n    );\r\n\r\n    function loginFor() {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({login, password})\r\n        };\r\n        const promise = new Promise(function (resolve, reject) {\r\n            setTimeout(() => resolve(requestOptions), 1000);\r\n        }).then(user => {\r\n                localStorage.setItem('currentUser', JSON.stringify(user));\r\n                //currentUser.next(user);\r\n                console.log('in Local storage: ', localStorage.getItem('currentUser'));\r\n                setLogin();\r\n                setPassword();\r\n                return user;\r\n            }\r\n        );\r\n\r\n        return promise;\r\n    }\r\n\r\n\r\n};\r\n\r\nexport default LoginForm;","import {connect} from 'react-redux';\r\nimport {logIn, logout} from '../../Store/authstore';\r\nimport Auth from '../../Component/Auth/Auth'\r\n\r\nconst mapStateToProps = (authentication) => ({\r\n    authentication\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    logIn: () => dispatch(logIn),\r\n    logout: () => dispatch(logout)\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Auth);","import { createStore } from 'redux';\r\n\r\nconst initialState = {\r\n    counter: 0\r\n};\r\n\r\nfunction counter(state = initialState, action) {\r\n    switch (action.type) {\r\n        case 'INCREMENT':\r\n            return {...state, counter: state.counter+1};\r\n        case 'DECREMENT':\r\n            return {...state, counter: state.counter-1};\r\n\r\n        default:\r\n            return state;\r\n    }};\r\n\r\nlet store  = createStore(counter,initialState,\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n\r\nexport const decrement = {type:'DECREMENT'};\r\nexport const increment = {type: \"INCREMENT\"};\r\n\r\nexport default store;","import React from 'react';\r\nimport gql from 'graphql-tag';\r\nimport {Query, Mutation} from 'react-apollo';\r\nimport Search from \"./Search\";\r\nimport {SButton} from \"../Auth/style\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport default function Home()  {\r\n    const currentUser = localStorage.getItem('currentUser');\r\nreturn (\r\n    currentUser ? (\r\n        <div className=\"Home\">\r\n        <div>\r\n            <Search/>\r\n            <SButton type=\"ghost\"\r\n                     onClick={logOut}>Log out</SButton>\r\n        </div>\r\n    </div>) : <Redirect to='/auth'/>\r\n)\r\n};\r\n\r\n\r\nfunction logOut() {\r\n    localStorage.removeItem('currentUser');\r\n    window.location.reload(true);\r\n}","import React from 'react';\r\nimport Auth from \"../Auth/Auth\";\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link\r\n} from \"react-router-dom\";\r\nimport HomePage from \"./HomePage\";\r\nfunction Routing() {\r\n    return (\r\n        <Router>\r\n            <ul>\r\n                <li>\r\n                    <Link to=\"/auth\">Log In</Link>\r\n                </li>\r\n                <li>\r\n                    <Link to=\"/repositories\">Repositories</Link>\r\n                </li>\r\n                <li>\r\n                    <Link to=\"/profile\">Profile</Link>\r\n                </li>\r\n            </ul>\r\n            <Switch>\r\n                {/*<Route path=\"profile/:id\" component={Profile} />*/}\r\n                {/*<Route path=\"repository/:id\" component={Repository} />*/}\r\n                <Route path=\"/auth\">\r\n                    <Auth/>\r\n                </Route>\r\n                <Route path=\"/\" component={HomePage}/>\r\n            </Switch>\r\n        </Router>\r\n    )\r\n}\r\nexport default Routing;","import React from 'react';\nimport {SButton} from \"../Auth/style\";\nimport Routing from \"./Routing\";\nfunction App() {\n    return (\n        <Routing/>\n    );\n}\n\n\nfunction logOut() {\n    localStorage.removeItem('currentUser');\n    //currentUser.next(null);\n    window.location.reload(true);\n}\nexport default App;\n","import {connect} from 'react-redux';\r\nimport {increment, decrement} from '../../Store/store';\r\nimport App from '../../Component/App/App'\r\n\r\nconst mapStateToProps = ({counter}) => ({\r\n    counter\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    increment: () => dispatch(increment),\r\n    decrement: () => dispatch(decrement)\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Auth from './Controllers/Auth/Auth';\nimport App from './Controllers/App/App';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport ourStore from './Store/authstore';\nimport { ApolloProvider } from 'react-apollo';\nimport { ApolloClient } from 'apollo-client';\nimport { HttpLink } from 'apollo-link-http';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport {Route, Router} from \"react-router-dom\";\n\nconst cache = new InMemoryCache();\n\nconst GITHUB_BASE_URL = 'https://api.github.com/graphql';\n\nconst httpLink = new HttpLink({\n    uri: GITHUB_BASE_URL,\n    headers: {\n        authorization: `Bearer ${\n            process.env.REACT_APP_GITHUB_PERSONAL_ACCESS_TOKEN\n        }`,\n    },\n});\nconst rootElement = document.getElementById('root');\nconst client = new ApolloClient({\n    link: httpLink,\n    cache,\n});\n\nReactDOM.render(\n\n    <Provider store={ourStore}>\n        <ApolloProvider client={client}>\n            <App/>\n        </ApolloProvider>\n    </Provider>\n,\n    rootElement\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}